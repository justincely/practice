/* Practice

 */
#include <typeinfo>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <fstream>
#include <stdexcept>

using namespace std;

//------------------------------------------------------------------------------

int fibonacci(double n)
{
  if (n == 0)
    return 0;
  else if (n == 1)
    return 1;
  else
    return fibonacci(n - 1) + fibonacci(n - 2);
}

//------------------------------------------------------------------------------

bool isprime(int number)
{

  if (number == 2)
    return true;

  if ((number < 2) || (number % 2 == 0))
    return false;

  for (int value=3; value < sqrt(number) + 1; value+=2){
    if (number % value == 0)
      return false;
  };

  return true;

}

//------------------------------------------------------------------------------

int len_collatz(long start)
{

  if (! start > 0)
    throw std::invalid_argument("received negative value or zero");

  int seq_length = 1;

  while (start != 1){
    //cout << "  " << start << "\n";
    if (start % 2 == 0)
      start = start / 2;
    else
      start = (3 * start) + 1;

    if (! start > 0)
      throw std::invalid_argument("computed negative value or zero");

    seq_length += 1;
  };


  return seq_length;
}

//------------------------------------------------------------------------------

string reverse (string s) {

  string result=""; //create a new string and set it to the empty string

  for (int i=0; i<s.length( ) ; i++) { //s.length( ) returns the length of a string

    result = s[ i ] + result ; //take the newest character and add it before what we have already
  }

return result;
}

//------------------------------------------------------------------------------

int problem_1(int N)
{
  /*If we list all the natural numbers below 10 that are multiples of
    3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.

  */

  int sum = 0;

  for (int i=0; i<N; i++){
    if (i % 3 == 0)
      sum += i;
    else if (i % 5 == 0)
      sum += i;
    else
     {};
  }

  return sum;
}

//------------------------------------------------------------------------------

int problem_2(double limit=4e6)
{
  /* Each new term in the Fibonacci sequence is generated by adding the
    previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
  */

  int sum = 0;
  int iteration = 0;
  int current = fibonacci(iteration);

  while (current < limit){
    if (current % 2 != 0)
      sum += current;

    iteration ++;
    current = fibonacci(iteration);

  };

  return sum;
}

//------------------------------------------------------------------------------

int problem_3(double value=600851475143)
{
  /*prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
  */

  int max_prime_fac = 1;

  for (int i=0; i<sqrt(value)+1; i++){
    if (isprime(i) && (remainder(value, i) == 0) && (i > max_prime_fac)){
      max_prime_fac = i;
    };

  };

  return max_prime_fac;
}

//------------------------------------------------------------------------------

int problem_4()
{
  /*A palindromic number reads the same both ways. The largest palindrome
    made from the product of two 2-digit numbers is 9009 = 91 x 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
  */

  int largest = 0;
  int product = 0;

  for (int val1=100; val1<1000; val1++){
    for (int val2=100; val2<1000; val2++){
      product = val1 * val2;
      string prod_str = static_cast<ostringstream*>( &(ostringstream() << product) )->str();
      if (prod_str == reverse(prod_str) && (product > largest))
	largest = product;
    };
  };

  return largest;

}

//------------------------------------------------------------------------------

int problem_5(int N=20)
{
  int out = N;
  bool leave = false;

  while (!leave){
      out += N;
      leave = true;

      for (int val=N; val>1; val--){
	if (out % val){
	  leave = false;
	  break;
	};
      };
  };

  return out;
}

//------------------------------------------------------------------------------

int problem_6(int N=100)
{
  int sum_of_squares = 0;
  int square_of_sums = 0;
  int diff = 0;

  for (int i=1; i<=N; i++){
    sum_of_squares += i*i;
    square_of_sums += i;
  };

  square_of_sums *= square_of_sums;

  return square_of_sums - sum_of_squares;

}

////////////////////////////////////////////////////////////////////////////////

int problem_7(int N=10001)
{
  int count = 0;
  int value = 0;

  while (count < N){
    value ++;

    if ((value % 2 == 0) && (value != 2))
      continue;

    if (isprime(value))
      count += 1;

  };

  return value;

}

////////////////////////////////////////////////////////////////////////////////

int problem_8()
{
  int number_arr[1000] = {0};
  int position = 0;
  std::string line;

  ifstream file("problem_008_source.txt");
  if (file.is_open())
    {
      while (! file.eof() )
  	{
  	  getline(file, line);
	  if (line.length() == 0)
	    continue;

	  for (int i=0; i<line.length(); i++){
	    //I hate that this is how to convert a char to int
	    stringstream str;
	    str << line[i];
	    str >> number_arr[position];
	    // end
	    position++;
	  };
	};
    };
  file.close();

  int start = 0;
  int end = start + 5;
  int max_prod = 0;

  while (end <= 1000){
    int tmp_prod = 1;
    for (int i=start; i<end; i++){
      tmp_prod *= (char)number_arr[i];
    };

    if ((tmp_prod) > max_prod)
      max_prod = tmp_prod;

    start++;
    end++;
  };

  return max_prod;
}

////////////////////////////////////////////////////////////////////////////////

int problem_9(){
  int a = 1, b = 2, c = 3;
  int prod = 0;

  for (int a=1; a<1000; a+=1){
    for (int b=2; b<1000; b+=1){
      for (int c=3; c<1000; c+=1){
        if (! (a < b < c))
          continue;

        if (! (a+b+c == 1000))
          continue;

        if (a*a + b*b == c*c)
          prod = a*b*c;
      }
    }
  }

  return prod;
}

////////////////////////////////////////////////////////////////////////////////

double problem_10()
{
  double running_sum = 2.0;

  for (int val=3; val<=2e6; val+=2){
    if (isprime(val))
      running_sum += val;
  };

  return running_sum;

}

////////////////////////////////////////////////////////////////////////////////

int problem_14()
{
  int longest_len = 0;
  int longest_val = 0;
  int new_len = 0;

  for (int i=1; i<=1000000; i++){
    new_len = len_collatz(i);
    //std::cout << i << " " << new_len << "\n";
    if (new_len > longest_len){
      longest_len = new_len;
      longest_val = i;
    }

  };

  return longest_val;
}

////////////////////////////////////////////////////////////////////////////////

int main()
{
  std::cout << "Problem 1: " << problem_1(1000) << "\n";
  std::cout << "Problem 2: " << problem_2(4e6) << "\n";
  std::cout << "Problem 3: " << problem_3() << "\n";
  std::cout << "Problem 4: " << problem_4() << "\n";
  std::cout << "Problem 5: " << problem_5() << "\n";
  std::cout << "Problem 6: " << problem_6() << "\n";
  std::cout << "Problem 7: " << problem_7() << "\n";
  std::cout << "Problem 8: " << problem_8() << "\n";
  std::cout << "Problem 9: " << problem_9() << "\n";
  printf("Problem 10: %f \n", problem_10());
  std::cout << "Problem 14: " << problem_14() << "\n";
}
